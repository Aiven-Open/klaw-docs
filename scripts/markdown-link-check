#!/bin/bash

FILES_TO_CHECK=""
QUIET_MODE=""
OFFLINE_CODE=""
BROKEN_LINK=false

# Parse command-line options
while getopts "f:qo" opt; do
  case $opt in
    f)
      FILES_TO_CHECK="$OPTARG"
      ;;
    q)
      QUIET_MODE="-q"
      ;;
    o)
      OFFLINE_CODE="--config=./scripts/markdown-link-check-offline-config.json"
      ;;
    \?)
      echo "Usage: $0 [-f file] [-q]"
      exit 1
      ;;
  esac
done

if [ -n "$FILES_TO_CHECK" ]; then
  # Check the specified file
  echo "üîç Checking links in $FILES_TO_CHECK."
  markdown-link-check "$FILES_TO_CHECK" $QUIET_MODE $OFFLINE_CODE
else
  # Check all Markdown files
  echo "üîç Checking links in all markdown files."
  # Use "find" to locate all Markdown files excluding those in node_modules
  # shellcheck disable=SC2046
  markdown-link-check $(find . -type f -name '*.md' ! -path '*/node_modules/*' -print) $QUIET_MODE $OFFLINE_CODE
fi

# Check if an error occurred for link checking
if [ -z "$RETURN_CODE" ] || [ $RETURN_CODE -ne 0 ]; then
  BROKEN_LINK=true
fi


# Show custom error for broken links
if [ $BROKEN_LINK ]; then
    echo -e "\n\nüôã Markdown link check failed"
    echo -e "   This can have multiple reasons:\n"
    echo -e "1. A file name contains spaces (My file.md). Use a '-' instead of spaces."
    echo -e "2. A file was moved and this broke existing links to that file. Check the log-output! You can search for 'dead links found!' to find the failures."
    echo -e "3. A target in a link was not found. Make sure that relative paths start from the location of your file."
    exit 1
fi
