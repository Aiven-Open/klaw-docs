const fs = require("fs");
const path = require("path");
const sidebars = require("../sidebars");

function checkAllMarkdownFilesAreInSidebar(basePath, allListedFiles) {
  const files = fs.readdirSync(basePath);

  files.forEach((file) => {
    const filePath = path.join(basePath, file);
    const stat = fs.statSync(filePath);

    // docs/releases is a autogenerated index, does not need to be checked here
    if (stat.isDirectory() && !filePath.includes("docs/releases")) {
      checkAllMarkdownFilesAreInSidebar(filePath, allListedFiles);
    } else if (path.extname(file) === ".md" && !file.startsWith("DRAFT_")) {
      const isInList = allListedFiles.includes(filePath);

      if (!isInList) {
        console.error(`
\n ⚠️  file: ${filePath} is not listed in sidebar.js
    If you have a markdown file that is not yet to be published
    use DRAFT_ as prefix, then it will not show up in this warning.`);
      }
    }
  });
}

function checkListedFileIsInFileSystem(fileToCheck) {
  if (!fs.existsSync(fileToCheck)) {
    console.error(`⛔️ File ${fileToCheck} is missing.`);
  } else {
    console.log(`✅ File ${fileToCheck} is correctly linked in sidebar.`);
  }
}
function checkSidebarItems(sidebarConfig, basePath, callback) {
  if (!sidebarConfig || !basePath) return;

  // track listed files to compare to all markdown files later
  const allListedFiles = [];

  // track remaining calls to determine when process is finished
  let remainingCalls = 0;

  if (Array.isArray(sidebarConfig)) {
    // set length to known length of sidebar.docs array
    remainingCalls = sidebarConfig.length;

    sidebarConfig.forEach((item) => {
      if (item?.link?.id !== undefined) {
        // item?.link?.id is not part of sidebarConfig.length, so
        // we don't increase the counter or check for callback
        const fileToCheck = path.join(basePath, `${item?.link?.id}.md`);
        checkListedFileIsInFileSystem(fileToCheck);
        allListedFiles.push(fileToCheck);
      }

      if (typeof item === "string") {
        const fileToCheck = path.join(basePath, `${item}.md`);
        checkListedFileIsInFileSystem(fileToCheck);
        allListedFiles.push(fileToCheck);
        // decrease the count when processing a string item
        remainingCalls--;
        checkCallback();
      } else
        checkSidebarItems(item.items, path.join(basePath), (files) => {
          allListedFiles.push(...files); // Concatenate files from nested callback
          // decrease the count when processing a string item
          remainingCalls--;
          checkCallback();
        });
    });
  }
  function checkCallback() {
    if (remainingCalls === 0) {
      callback(allListedFiles); // pass allListedFiles array to the callback
    }
  }
}

checkSidebarItems(sidebars.docs, "docs", (allListedFiles) => {
  checkAllMarkdownFilesAreInSidebar("docs", allListedFiles);
});
